{
	"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"applicationPrefix": {
			"type": "string",
			"metadata": {
				"description": "Prefix to use when creating the resources in this deployment.",
				"name": "Application name prefix"
			},
			"defaultValue": "ghost"
		},
		"hostingPlanSku": {
			"type": "string",
			"metadata": {
				"description": "Specify the pricing tier for the App Service Plan.",
				"name": "App Service Plan SKU"
			},
			"allowedValues": [
				"B1",
				"B2",
				"B3",
				"S1",
				"S2",
				"S3",
				"P1v2",
				"P2v2",
				"P3v2"
			],
			"defaultValue": "B1"
		},
		"logAnalyticsWorkspaceSku": {
			"type": "string",
			"metadata": {
				"description": "Specify the pricing tier for the Log Analytics workspace.",
				"name": "Log Analytics workspace SKU"
			},
			"allowedValues": [
				"Free",
				"PerGB2018",
				"PerNode",
				"Premium",
				"Standalone",
				"Standard"
			],
			"defaultValue": "Free"
		},
		"location": {
			"type": "string",
			"metadata": {
				"description": "Specify the location to deploy the resources",
				"name": "Location",
				"strongType": "location"
			},
			"defaultValue": "[resourceGroup().location]"
		},
		"databasePassword": {
			"type": "securestring",
			"metadata": {
				"description": "Enter password.",
				"name": "MySQL Server Password"
			}
		}
	},
	"variables": {
		"webAppName": "[concat(parameters('applicationPrefix'), '-web-', uniqueString(resourceGroup().Id))]",
		"hostingPlanName": "[concat(parameters('applicationPrefix'), '-asp-', uniqueString(resourceGroup().Id))]",
		"logAnalyticsWorkspaceName": "[concat(parameters('applicationPrefix'), '-la-', uniqueString(resourceGroup().Id))]",
		"applicationInsightsName": "[concat(parameters('applicationPrefix'), '-ai-', uniqueString(resourceGroup().Id))]",
		"keyVaultName": "[concat(parameters('applicationPrefix'), '-kv-', uniqueString(resourceGroup().Id))]",
		"databasePasswordResourceId": "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'databasePassword')]",
		"frontDoorName": "[concat(parameters('applicationPrefix'), '-fd-', uniqueString(resourceGroup().Id))]",
		"wafPolicyName": "[concat(parameters('applicationPrefix'), 'waf', uniqueString(resourceGroup().Id))]",
		"mysqlservername": "[concat(parameters('applicationPrefix'), 'sql', uniqueString(resourceGroup().Id))]",
		"mysqlserverusername": "[concat(parameters('applicationPrefix'), 'user')]",
		"mysqldbname": "[concat(parameters('applicationPrefix'), 'db')]",
		"mystoragename": "[concat(parameters('applicationPrefix'), 'storage', uniqueString(resourceGroup().Id))]",
		"containerName": "[concat(parameters('applicationPrefix'), 'backupcontainer')]",
		"fileShareName": "[concat(parameters('applicationPrefix'), 'fileshare')]"
	},
	"resources": [
		{
			"name": "[variables('logAnalyticsWorkspaceName')]",
			"type": "Microsoft.OperationalInsights/workspaces",
			"apiVersion": "2020-08-01",
			"comments": "Log Analytics workspace",
			"location": "[parameters('location')]",
			"properties": {
				"sku": {
					"name": "[parameters('logAnalyticsWorkspaceSku')]"
				}
			}
		},
		{
			"name": "[variables('keyVaultName')]",
			"type": "Microsoft.KeyVault/vaults",
			"apiVersion": "2019-09-01",
			"dependsOn": [
				"[variables('webAppName')]"
			],
			"location": "[parameters('location')]",
			"properties": {
				"tenantId": "[subscription().tenantId]",
				"accessPolicies": [
					{
						"tenantId": "[subscription().tenantId]",
						"objectId": "[reference(resourceId('Microsoft.Web/sites', variables('webAppName')),'2019-08-01', 'full').identity.principalId]",
						"permissions": {
							"secrets": [
								"Get"
							]
						}
					}
				],
				"sku": {
					"name": "standard",
					"family": "A"
				}
			},
			"resources": [
				{
					"name": "databasePassword",
					"type": "secrets",
					"apiVersion": "2019-09-01",
					"dependsOn": [
						"[variables('keyVaultName')]"
					],
					"properties": {
						"value": "[parameters('databasePassword')]"
					}
				},
				{
					"name": "[concat('Microsoft.Insights/', 'KeyVaultDiagnostics')]",
					"type": "providers/diagnosticSettings",
					"apiVersion": "2017-05-01-preview",
					"location": "[parameters('location')]",
					"dependsOn": [
						"[variables('keyVaultName')]"
					],
					"properties": {
						"workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
						"metrics": [
							{
								"category": "AllMetrics",
								"enabled": true
							}
						],
						"logs": [
							{
								"category": "AuditEvent",
								"enabled": true
							}
						]
					}
				}
			]
		},
		{
			"type": "Microsoft.Storage/storageAccounts",
			"apiVersion": "2019-06-01",
			"name": "[variables('mystoragename')]",
			"location": "[parameters('location')]",
			"sku": {
				"name": "Standard_LRS",
				"tier": "Standard"
			},
			"kind": "StorageV2",
			"properties": {
				"accessTier": "Hot"
			},
			"resources": [
				{
					"type": "blobServices/containers",
					"apiVersion": "2019-06-01",
					"name": "[concat('default/', variables('containerName'))]",
					"dependsOn": [
						"[variables('mystoragename')]"
					]
				}
			]
		},
		{
			"type": "Microsoft.Storage/storageAccounts/fileServices/shares",
			"apiVersion": "2019-06-01",
			"name": "[concat(variables('mystoragename'), '/default/', variables('fileShareName'))]",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('mystoragename'))]"
			]
		},
		{
			"type": "Microsoft.DBforMySQL/servers",
			"apiVersion": "2017-12-01",
			"name": "variables('mysqlservername')",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[variables('logAnalyticsWorkspaceName')]",
				"[variables('applicationInsightsName')]",
				"[variables('keyVaultName')]"
			],
			"sku": {
				"name": "B_Gen5_2",
				"tier": "Basic",
				"family": "Gen5",
				"capacity": 2
			},
			"properties": {
				"storageProfile": {
					"storageMB": 52224,
					"backupRetentionDays": 7,
					"geoRedundantBackup": "Disabled",
					"storageAutogrow": "Enabled"
				},
				"administratorLogin": "variables('mysqlserverusername')",
				"administratorLoginPassword": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('databasePasswordResourceId')).secretUriWithVersion, ')')]",
				"version": "5.7",
				"sslEnforcement": "Disabled",
				"minimalTlsVersion": "TLSEnforcementDisabled",
				"infrastructureEncryption": "Disabled",
				"publicNetworkAccess": "Enabled"
			}
		},
		{
			"name": "[variables('webAppName')]",
			"type": "Microsoft.Web/sites",
			"apiVersion": "2020-09-01",
			"comments": "Web App",
			"location": "[parameters('location')]",
			"kind": "app,linux,container",
			"dependsOn": [
				"[variables('logAnalyticsWorkspaceName')]",
				"[variables('hostingPlanName')]",
				"[variables('applicationInsightsName')]"
			],
			"identity": {
				"type": "SystemAssigned"
			},
			"properties": {
				"name": "[variables('webAppName')]",
				"clientAffinityEnabled": true,
				"serverFarmId": "[resourceId('Microsoft.Web/serverfarms/', variables('hostingPlanName'))]",
				"httpsOnly": true,
				"enabled": true,
				"reserved": true,
				"siteConfig": {
					"http20Enabled": true,
					"httpLoggingEnabled": true,
					"minTlsVersion": "1.2",
					"ftpsState": "Disabled",
					"linuxFxVersion": "DOCKER|ghost:latest",
					"alwaysOn": true,
					"use32BitWorkerProcess": false,
					"ipSecurityRestrictions": [
						{
							"ipAddress": "AzureFrontDoor.Backend",
							"action": "Allow",
							"tag": "ServiceTag",
							"priority": 300,
							"name": "Access from Azure Front Door",
							"description": "Rule for access from Azure Front Door"
						}
					]
				}
			},
			"resources": [
				{
					"type": "config",
					"name": "connectionstrings",					
					"apiVersion": "2020-12-01",
					"location": "[parameters('location')]",
					"dependsOn": [
						"[variables('webAppName')]",
						"[variables('keyVaultName')]"
					],
					"properties": {
						"ghostdbstring": {
							"value": "[concat('Database=',variables('mysqldbname'),'; Data Source=',variables('mysqlservername'),'.mysql.database.azure.com; User Id=',concat(variables('mysqlserverusername'),'@',variables('mysqlservername')),'; Password=',concat('@Microsoft.KeyVault(SecretUri=', reference(variables('databasePasswordResourceId')).secretUriWithVersion, ')'))]",
							"type": "MySQL"
						}
					}
				},
				{
					"type": "config",
					"name": "backup",					
					"apiVersion": "2020-12-01",
					"properties": {
						"backupName": "myghostbackup",
						"backupSchedule": {
							"frequencyInterval": "1",
							"frequencyUnit": "Day",
							"keepAtLeastOneBackup": "true",
							"retentionPeriodInDays": "30"
						},
						"databases": [
							{
								"connectionStringName": "ghostdbstring",
								"databaseType": "MySQL"
							}
						],
						"enabled": "true",
						"storageAccountUrl": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('mystoragename'))).primaryEndpoints.blob]"
					}
				},
				{
					"type": "config",
					"apiVersion": "2020-09-01",
					"location": "[parameters('location')]",
					"name": "appsettings",
					"dependsOn": [
						"[variables('webAppName')]",
						"[variables('keyVaultName')]"
					],
					"properties": {
						"APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('microsoft.insights/components/', variables('applicationInsightsName')), '2020-02-02-preview').InstrumentationKey]",
						"APPLICATIONINSIGHTS_CONNECTION_STRING": "[reference(resourceId('microsoft.insights/components/', variables('applicationInsightsName')), '2020-02-02-preview').ConnectionString]",
						"ApplicationInsightsAgent_EXTENSION_VERSION": "~2",
						"XDT_MicrosoftApplicationInsights_Mode": "default",
						"NODE_ENV": "production",
						"GHOST_CONTENT": "/var/lib/ghost/content_files/",
						"paths__contentPath": "/var/lib/ghost/content_files/",
						"privacy_useUpdateCheck": "false",
						"url": "[concat('https://', variables('frontDoorName'), '.azurefd.net')]",
						"WEBSITES_ENABLE_APP_SERVICE_STORAGE": "true",
						"WEBSITES_CONTAINER_START_TIME_LIMIT": 460,
						"DOCKER_REGISTRY_SERVER_PASSWORD": "",
						"DOCKER_REGISTRY_SERVER_URL": "https://index.docker.io",
						"DOCKER_REGISTRY_SERVER_USERNAME": "",
						"database__client": "mysql",
						"database__connection__database": "ghost",
						"database__connection__host": "[concat(variables('mysqlservername'),'.mysql.database.azure.com')]",
						"database__connection__password": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('databasePasswordResourceId')).secretUriWithVersion, ')')]",
						"database__connection__port": "3306",
						"database__connection__user": "[concat(variables('mysqlserverusername'),'@',variables('mysqlservername'))]"
					}
				},
				{
					"name": "[concat('Microsoft.Insights/', 'AppDiagnostics')]",
					"type": "providers/diagnosticSettings",
					"apiVersion": "2017-05-01-preview",
					"location": "[parameters('location')]",
					"dependsOn": [
						"[variables('webAppName')]"
					],
					"properties": {
						"workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
						"metrics": [
							{
								"category": "AllMetrics",
								"enabled": true
							}
						],
						"logs": [
							{
								"category": "AppServiceHTTPLogs",
								"enabled": true
							},
							{
								"category": "AppServiceConsoleLogs",
								"enabled": true
							},
							{
								"category": "AppServiceAppLogs",
								"enabled": true
							},
							{
								"category": "AppServiceFileAuditLogs",
								"enabled": true
							},
							{
								"category": "AppServiceAuditLogs",
								"enabled": true
							},
							{
								"category": "AppServiceIPSecAuditLogs",
								"enabled": true
							},
							{
								"category": "AppServicePlatformLogs",
								"enabled": true
							},
							{
								"category": "AppServiceAntivirusScanAuditLogs",
								"enabled": true
							}
						]
					}
				}
			]
		},
		{
			"name": "[variables('hostingPlanName')]",
			"type": "Microsoft.Web/serverfarms",
			"apiVersion": "2020-06-01",
			"comments": "App Service Plan",
			"location": "[parameters('location')]",
			"kind": "linux",
			"dependsOn": [
				"[variables('logAnalyticsWorkspaceName')]"
			],
			"properties": {
				"name": "[variables('hostingPlanName')]",
				"reserved": true
			},
			"sku": {
				"name": "P1v2",
				"tier": "PremiumV2",
				"size": "P1v2",
				"family": "Pv2",
				"capacity": 1
			},
			"resources": [
				{
					"name": "[concat('Microsoft.Insights/', 'HostingPlanDiagnostics')]",
					"type": "providers/diagnosticSettings",
					"apiVersion": "2017-05-01-preview",
					"location": "[parameters('location')]",
					"dependsOn": [
						"[variables('hostingPlanName')]"
					],
					"properties": {
						"workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
						"metrics": [
							{
								"category": "AllMetrics",
								"enabled": true
							}
						]
					}
				}
			]
		},
		{
			"name": "[variables('applicationInsightsName')]",
			"type": "Microsoft.Insights/components",
			"apiVersion": "2020-02-02-preview",
			"comments": "Application Insights",
			"location": "[parameters('location')]",
			"kind": "web",
			"dependsOn": [
				"[variables('logAnalyticsWorkspaceName')]"
			],
			"properties": {
				"ApplicationId": "[variables('webAppName')]",
				"Application_Type": "web",
				"WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
			},
			"resources": [
				{
					"name": "[concat('Microsoft.Insights/', 'InsightsDiagnostics')]",
					"type": "providers/diagnosticSettings",
					"apiVersion": "2017-05-01-preview",
					"location": "[parameters('location')]",
					"dependsOn": [
						"[variables('applicationInsightsName')]"
					],
					"properties": {
						"workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
						"metrics": [
							{
								"category": "AllMetrics",
								"enabled": true
							}
						],
						"logs": [
							{
								"category": "AppAvailabilityResults",
								"enabled": true
							},
							{
								"category": "AppBrowserTimings",
								"enabled": true
							},
							{
								"category": "AppEvents",
								"enabled": true
							},
							{
								"category": "AppMetrics",
								"enabled": true
							},
							{
								"category": "AppDependencies",
								"enabled": true
							},
							{
								"category": "AppExceptions",
								"enabled": true
							},
							{
								"category": "AppPageViews",
								"enabled": true
							},
							{
								"category": "AppPerformanceCounters",
								"enabled": true
							},
							{
								"category": "AppRequests",
								"enabled": true
							},
							{
								"category": "AppSystemEvents",
								"enabled": true
							},
							{
								"category": "AppTraces",
								"enabled": true
							}
						]
					}
				}
			]
		},
		{
			"type": "Microsoft.Network/frontDoors",
			"apiVersion": "2020-05-01",
			"name": "[variables('frontDoorName')]",
			"location": "global",
			"dependsOn": [
				"[variables('webAppName')]",
				"[variables('logAnalyticsWorkspaceName')]",
				"[variables('wafPolicyName')]"
			],
			"properties": {
				"routingRules": [
					{
						"name": "routingRule1",
						"properties": {
							"frontendEndpoints": [
								{
									"id": "[resourceId('Microsoft.Network/frontDoors/frontendEndpoints', variables('frontDoorName'), 'frontendEndpoint1')]"
								}
							],
							"acceptedProtocols": [
								"Http",
								"Https"
							],
							"patternsToMatch": [
								"/*"
							],
							"routeConfiguration": {
								"@odata.type": "#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration",
								"forwardingProtocol": "HttpsOnly",
								"backendPool": {
									"id": "[resourceId('Microsoft.Network/frontDoors/backendPools', variables('frontDoorName'), 'backendPool1')]"
								},
								"cacheConfiguration": {
									"queryParameterStripDirective": "StripNone",
									"dynamicCompression": "Enabled"
								}
							},
							"enabledState": "Enabled"
						}
					}
				],
				"healthProbeSettings": [
					{
						"name": "healthProbeSettings1",
						"properties": {
							"path": "/",
							"protocol": "Https",
							"intervalInSeconds": 120
						}
					}
				],
				"loadBalancingSettings": [
					{
						"name": "loadBalancingSettings1",
						"properties": {
							"sampleSize": 4,
							"successfulSamplesRequired": 2
						}
					}
				],
				"backendPools": [
					{
						"name": "backendPool1",
						"properties": {
							"backends": [
								{
									"address": "[reference(variables('webAppName')).defaultHostName]",
									"backendHostHeader": "[reference(variables('webAppName')).defaultHostName]",
									"httpPort": 80,
									"httpsPort": 443,
									"weight": 50,
									"priority": 1,
									"enabledState": "Enabled"
								}
							],
							"loadBalancingSettings": {
								"id": "[resourceId('Microsoft.Network/frontDoors/loadBalancingSettings', variables('frontDoorName'), 'loadBalancingSettings1')]"
							},
							"healthProbeSettings": {
								"id": "[resourceId('Microsoft.Network/frontDoors/healthProbeSettings', variables('frontDoorName'), 'healthProbeSettings1')]"
							}
						}
					}
				],
				"frontendEndpoints": [
					{
						"name": "frontendEndpoint1",
						"properties": {
							"hostName": "[concat(variables('frontDoorName'), '.azurefd.net')]",
							"sessionAffinityEnabledState": "Enabled",
							"webApplicationFirewallPolicyLink": {
								"id": "[resourceId('Microsoft.Network/frontdoorWebApplicationFirewallPolicies', variables('wafPolicyName'))]"
							}
						}
					}
				],
				"enabledState": "Enabled"
			},
			"resources": [
				{
					"name": "[concat('Microsoft.Insights/', 'FrontDoorDiagnostics')]",
					"type": "providers/diagnosticSettings",
					"apiVersion": "2017-05-01-preview",
					"location": "[parameters('location')]",
					"dependsOn": [
						"[variables('frontDoorName')]"
					],
					"properties": {
						"workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
						"metrics": [
							{
								"category": "AllMetrics",
								"enabled": true
							}
						],
						"logs": [
							{
								"category": "FrontdoorAccessLog",
								"enabled": true
							},
							{
								"category": "FrontdoorWebApplicationFirewallLog",
								"enabled": true
							}
						]
					}
				}
			]
		},
		{
			"apiVersion": "2020-04-01",
			"type": "Microsoft.Network/FrontDoorWebApplicationFirewallPolicies",
			"name": "[variables('wafPolicyName')]",
			"location": "global",
			"properties": {
				"policySettings": {
					"mode": "Prevention",
					"enabledState": "Enabled"
				},
				"managedRules": {
					"managedRuleSets": [
						{
							"ruleSetType": "DefaultRuleSet",
							"ruleSetVersion": "1.0"
						}
					]
				}
			}
		}
	],
	"outputs": {
		"webAppHostName": {
			"type": "string",
			"value": "[reference(resourceId('Microsoft.Web/sites', variables('webAppName')), '2020-09-01').defaultHostName]"
		},
		"webAppPrincipalId": {
			"type": "string",
			"value": "[reference(resourceId('Microsoft.Web/sites', variables('webAppName')), '2020-09-01', 'full').identity.principalId]"
		},
		"frontDoorHostName": {
			"type": "string",
			"value": "[reference(resourceId('Microsoft.Network/frontDoors', variables('frontDoorName')), '2020-05-01').frontendEndpoints[0].properties.hostName]"
		}
	}
}